"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8470],{3905:function(e,t,r){r.d(t,{Zo:function(){return g},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},g=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),s=p(r),m=o,b=s["".concat(u,".").concat(m)]||s[m]||c[m]||a;return r?n.createElement(b,i(i({ref:t},g),{},{components:r})):n.createElement(b,i({ref:t},g))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=s;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},5455:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return g},default:function(){return s}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],l={},u="Logger",p={unversionedId:"architecture/logger",id:"architecture/logger",title:"Logger",description:"Developing a logging strategy is a good practice when you start building an app because it will help you develop and troubleshoot more quickly. Ambient supports the following log levels in plugins:",source:"@site/docs/architecture/logger.md",sourceDirName:"architecture",slug:"/architecture/logger",permalink:"/docs/docs/architecture/logger",editUrl:"https://github.com/ambientkit/docs/blob/main/docs/architecture/logger.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Environment Variables",permalink:"/docs/docs/architecture/envars"},next:{title:"Storage System",permalink:"/docs/docs/architecture/storage"}},g=[],c={toc:g};function s(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"logger"},"Logger"),(0,a.kt)("p",null,"Developing a logging strategy is a good practice when you start building an app because it will help you develop and troubleshoot more quickly. Ambient supports the following log levels in plugins:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Debug"),(0,a.kt)("li",{parentName:"ul"},"Info"),(0,a.kt)("li",{parentName:"ul"},"Warn"),(0,a.kt)("li",{parentName:"ul"},"Error")),(0,a.kt)("p",null,"There is also a ",(0,a.kt)("inlineCode",{parentName:"p"},"Fatal")," log level that is available to only the core Ambient app because a plugin should not have the ability to terminate the app."),(0,a.kt)("p",null,"A logger should be enabled as early as possible so all logs are routed to the right system. Typically, the loading of environment variables occurs before the logger is set up so it's ok to use the built-in log package for those early exists. The Ambient app does return the logger once the app is created."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="main.go"',title:'"main.go"'},'import (\n    "log"\n\n    "github.com/ambientkit/ambient"\n    "github.com/ambientkit/ambient-template/cmd/myapp/app"\n    "github.com/ambientkit/plugin/logger/zaplogger"\n    "github.com/ambientkit/plugin/storage/localstorage"\n)\n\nfunc main() {\n    // ...\n    // Create the ambient app.\n    plugins := app.Plugins()\n    ambientApp, logger, err := ambient.NewApp("myapp", "1.0",\n        zaplogger.New(),\n        ambient.StoragePluginGroup{\n            Storage: localstorage.New("storage/site.bin", "storage/session.bin"),\n        },\n        plugins)\n    if err != nil {\n        log.Fatalln(err.Error())\n    }\n    // ...\n}\n')),(0,a.kt)("p",null,"There are two loggers available in the library:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/ambientkit/plugin/tree/main/logger/logruslogger"},"logruslogger")," - logging using ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/sirupsen/logrus"},(0,a.kt)("inlineCode",{parentName:"a"},"sirupsen/logrus"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/ambientkit/plugin/tree/main/logger/zaplogger"},"zaplogger")," - logging using ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/uber-go/zap"},(0,a.kt)("inlineCode",{parentName:"a"},"uber-go/zap")))))}s.isMDXComponent=!0}}]);