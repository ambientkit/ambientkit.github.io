"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8431],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3918:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={},s="Environment Variables",p={unversionedId:"architecture/envars",id:"architecture/envars",title:"Environment Variables",description:"Environment variables are one way to get information into the app at runtime. At a minimum, Ambient (more precisely the Session Manager) needs to have a session key so it can encrypt user sessions. Ambient is not opinioned about how you load the environment variables so you can load them from anywhere. We use the github.com/joho/godotenv package for reading from .env files.",source:"@site/docs/architecture/envars.md",sourceDirName:"architecture",slug:"/architecture/envars",permalink:"/docs/docs/architecture/envars",editUrl:"https://github.com/ambientkit/docs/blob/main/docs/architecture/envars.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Components",permalink:"/docs/docs/architecture/components"},next:{title:"Logger",permalink:"/docs/docs/architecture/logger"}},u=[{value:"Built-In Environment Variables",id:"built-in-environment-variables",children:[{value:"Suggested",id:"suggested",children:[],level:3},{value:"Optional",id:"optional",children:[],level:3},{value:"Dev Console",id:"dev-console",children:[],level:3},{value:"Cloud Provider Environment Varibles",id:"cloud-provider-environment-varibles",children:[],level:3}],level:2}],c={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"environment-variables"},"Environment Variables"),(0,o.kt)("p",null,"Environment variables are one way to get information into the app at runtime. At a minimum, Ambient (more precisely the Session Manager) needs to have a session key so it can encrypt user sessions. Ambient is not opinioned about how you load the environment variables so you can load them from anywhere. We use the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/joho/godotenv"},(0,o.kt)("inlineCode",{parentName:"a"},"github.com/joho/godotenv"))," package for reading from ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," files."),(0,o.kt)("p",null,"You can also use the ",(0,o.kt)("inlineCode",{parentName:"p"},"envdetect.LoadDotEnv()")," call to determine if ",(0,o.kt)("inlineCode",{parentName:"p"},"AMB_DOTENV=true")," so you have control over when the ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file is loaded."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="main.go"',title:'"main.go"'},'import (\n    "log"\n\n    "github.com/ambientkit/ambient/pkg/envdetect"\n    "github.com/joho/godotenv"\n)\n\nfunc main() {\n    // Load the .env file if AMB_DOTENV=true.\n    if envdetect.LoadDotEnv() {\n        err := godotenv.Load()\n        if err != nil {\n            log.Fatalf("app: error loading .env file: %v\\n", err.Error())\n        }\n    }\n    // ...\n}\n')),(0,o.kt)("h2",{id:"built-in-environment-variables"},"Built-In Environment Variables"),(0,o.kt)("p",null,"These environment variables are used through an Ambient app and can be used in plugins as well."),(0,o.kt)("h3",{id:"suggested"},"Suggested"),(0,o.kt)("p",null,"Session key to encrypt the cookie store. Generate with: ",(0,o.kt)("inlineCode",{parentName:"p"},"make privatekey"),". This is not required, but suggested when using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ambientkit/ambient-template"},"ambient-template")," because it's tied into the Makefile and the deployments to the cloud providers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-env"},"AMB_SESSION_KEY=\n")),(0,o.kt)("p",null,"Password hash that is base64 encoded. Generate with: ",(0,o.kt)("inlineCode",{parentName:"p"},"make passhash passwordhere"),". This is not required, but suggested when using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ambientkit/ambient-template"},"ambient-template")," because it's tied into the Makefile and the deployments to the cloud providers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-env"},"AMB_PASSWORD_HASH=\n")),(0,o.kt)("h3",{id:"optional"},"Optional"),(0,o.kt)("p",null,"Set the default log level to: ",(0,o.kt)("inlineCode",{parentName:"p"},"FATAL")," (4), ",(0,o.kt)("inlineCode",{parentName:"p"},"ERROR")," (3), ",(0,o.kt)("inlineCode",{parentName:"p"},"WARN")," (2), ",(0,o.kt)("inlineCode",{parentName:"p"},"INFO")," (1), ",(0,o.kt)("inlineCode",{parentName:"p"},"DEBUG")," (0). The default is: INFO. You can use text or integers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"AMB_LOGLEVEL=DEBUG\nAMB_LOGLEVEL=0\n")),(0,o.kt)("p",null,"Set the port the HTTP server will listen on. Default is: ",(0,o.kt)("inlineCode",{parentName:"p"},"8080")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"PORT=8080\n")),(0,o.kt)("p",null,"Set the URL prefix if behind a proxy. Default is: unset"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"AMB_URL_PREFIX=/api\n")),(0,o.kt)("p",null,"Set the time zone values from: ",(0,o.kt)("a",{parentName:"p",href:"https://golang.org/src/time/zoneinfo_abbrs_windows.go"},"https://golang.org/src/time/zoneinfo_abbrs_windows.go"),". Required if using MFA or another time reliant function. Default is: unset"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"}," AMB_TIMEZONE=America/New_York\n")),(0,o.kt)("p",null,"LoadDotEnv returns true if the AMB_DOTENV environment variable is set to true. Easy way to to control when ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," is loaded. Sample code is above. Default is: ",(0,o.kt)("inlineCode",{parentName:"p"},"false")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"AMB_DOTENV=true\n")),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"AMB_LOCAL")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," (default is: ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"data storage will use the local filesystem instead of the cloud provider storage for storing the app configuration")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"AMB_LOCAL=true\n")),(0,o.kt)("h3",{id:"dev-console"},"Dev Console"),(0,o.kt)("p",null,"Enable the Dev Console so the ",(0,o.kt)("inlineCode",{parentName:"p"},"amb")," CLI can interact with the app. You should not enable this in production. Default is: ",(0,o.kt)("inlineCode",{parentName:"p"},"false")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"AMB_DEVCONSOLE_ENABLE=true\n")),(0,o.kt)("p",null,"Set the URL for the Dev console that the ",(0,o.kt)("inlineCode",{parentName:"p"},"amb")," CLI connects to. Default is: ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"AMB_DEVCONSOLE_URL=http://localhost\n")),(0,o.kt)("p",null,"Set the port for the Dev Console that ",(0,o.kt)("inlineCode",{parentName:"p"},"amb")," CLI connects to. Default is: ",(0,o.kt)("inlineCode",{parentName:"p"},"8081")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"AMB_DEVCONSOLE_PORT=8081\n")),(0,o.kt)("h3",{id:"cloud-provider-environment-varibles"},"Cloud Provider Environment Varibles"),(0,o.kt)("p",null,"There is also a package available in the plugin repository that will use the correct cloud storage based on where it's deployed called ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ambientkit/plugin/tree/main/pkg/cloudstorage"},"cloudstorage"),". The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ambientkit/ambient-template"},"ambient-template")," repository uses it."))}m.isMDXComponent=!0}}]);