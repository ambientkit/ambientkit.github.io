"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9610],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=i.createContext({}),p=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=p(e.components);return i.createElement(u.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(t),m=r,d=c["".concat(u,".").concat(m)]||c[m]||g[m]||o;return t?i.createElement(d,a(a({ref:n},s),{},{components:t})):i.createElement(d,a({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=c;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var p=2;p<o;p++)a[p]=t[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},255:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return s},default:function(){return c}});var i=t(7462),r=t(3366),o=(t(7294),t(3905)),a=["components"],l={},u="gRPC Compiled Plugins",p={unversionedId:"plugins/grpc",id:"plugins/grpc",title:"gRPC Compiled Plugins",description:"Ambient also supports interacting with plugins over gRPC using the HashiCorp plugin system. This allows you to compile plugins and then send data back and forth just like a standard plugin. A few reasons why you may choose to go this route:",source:"@site/docs/plugins/grpc.md",sourceDirName:"plugins",slug:"/plugins/grpc",permalink:"/docs/plugins/grpc",editUrl:"https://github.com/ambientkit/ambientkit.github.io/blob/main/docs/plugins/grpc.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Enable & Disable",permalink:"/docs/plugins/enable"},next:{title:"Doc Generation",permalink:"/docs/plugins/docgen"}},s=[{value:"Plugin",id:"plugin",children:[],level:2},{value:"Ambient Usage",id:"ambient-usage",children:[],level:2},{value:"Limitations",id:"limitations",children:[],level:2}],g={toc:s};function c(e){var n=e.components,t=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"grpc-compiled-plugins"},"gRPC Compiled Plugins"),(0,o.kt)("p",null,"Ambient also supports interacting with plugins over gRPC using the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/hashicorp/go-plugin"},"HashiCorp plugin system"),". This allows you to compile plugins and then send data back and forth just like a standard plugin. A few reasons why you may choose to go this route:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"to dynamically load and unload plugins without restarting the application"),(0,o.kt)("li",{parentName:"ul"},"to write a plugin for Ambient in another language other than Go (it will require some non-trivial work to re-implement the plugin API)"),(0,o.kt)("li",{parentName:"ul"},"to isolate your application so plugins cannot affect your core application if they panic or leak memory"),(0,o.kt)("li",{parentName:"ul"},"to sell a plugin for Ambient, but don't want to distribute the source code")),(0,o.kt)("h2",{id:"plugin"},"Plugin"),(0,o.kt)("p",null,"To enable gRPC for your plugin, simply add a file to your plugin directory (",(0,o.kt)("inlineCode",{parentName:"p"},"cmd/plugin/main.go"),") and then update the information below with your plugin information. You must then build the binary by running: ",(0,o.kt)("inlineCode",{parentName:"p"},"go build"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "os"\n\n    "github.com/ambientkit/ambient/pkg/grpcp"\n    "github.com/username/yourplugin"\n    "github.com/hashicorp/go-hclog"\n    "github.com/hashicorp/go-plugin"\n)\n\nfunc main() {\n    plugin.Serve(&plugin.ServeConfig{\n        HandshakeConfig: grpcp.Handshake,\n        Plugins: map[string]plugin.Plugin{\n            "yourplugin": &grpcp.GenericPlugin{Impl: yourplugin.New()},\n        },\n        Logger: hclog.New(&hclog.LoggerOptions{\n            Level:      hclog.Debug,\n            Output:     os.Stderr,\n            JSONFormat: true,\n        }),\n        GRPCServer: plugin.DefaultGRPCServer,\n    })\n}\n\n')),(0,o.kt)("h2",{id:"ambient-usage"},"Ambient Usage"),(0,o.kt)("p",null,"To reference the gRPC plugin in Ambient, add the plugin name and the path to the binary to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Plugins")," array. Currently, gRPC plugins can only be used for generic and middleware plugins, they can't be used for the other core plugins."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'plugins := &ambient.PluginLoader{\n    // Core plugins are implicitly trusted.\n    Router:         awayrouter.New(h),\n    TemplateEngine: htmlengine.New(),\n    SessionManager: sessPlugin,\n    // Trusted plugins are those that are typically needed to boot so they\n    // will be enabled and given full access.\n    TrustedPlugins: trusted,\n    Plugins: []ambient.Plugin{\n        ambient.NewGRPCPlugin("yourplugin", "./yourplugin/cmd/plugin/yourplugin"),\n    },\n    Middleware: []ambient.MiddlewarePlugin{\n        // Middleware - executes bottom to top.\n        ambient.NewGRPCPlugin("yourmwplugin", "./yourmwplugin/cmd/plugin/yourmwplugin"),\n        sessPlugin,\n    },\n}\n')),(0,o.kt)("h2",{id:"limitations"},"Limitations"),(0,o.kt)("p",null,"There are a few limitations when using gRPC plugins because of the nature of the communication. You will need to keep these use cases in mind:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"storing values in request context"),": if you are relying on ",(0,o.kt)("inlineCode",{parentName:"li"},"context")," from ",(0,o.kt)("inlineCode",{parentName:"li"},"http.Request")," in your middleware and routes to store and read values, they won't behave as you expect because there is no way to serialize context values. You can't iterate over them so there isn't an easy way to get those values out to send them back and forth.")),(0,o.kt)("p",null,"If you want to take a closer look at the definitions, all of the data that is transferred between the server and the plugins is documented in these ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ambientkit/ambient/tree/main/pkg/grpcp/protobuf"},(0,o.kt)("inlineCode",{parentName:"a"},".proto")," files"),"."))}c.isMDXComponent=!0}}]);